# https://taskfile.dev
version: '3'

dotenv:
  - .env

tasks:
  default:
    aliases: ["all"]
    cmds:
      - task: up
      - task: unseal

  up:
    preconditions:
      - test -f .env
      - test -f docker-compose.yml
      - test -x ./scripts/elk/00_create-certs.sh
      - test -x ./scripts/elk/10_setup-users.sh
      - test -x ./scripts/kerberos/extract-keytab.sh
    cmds:
      - chmod +x ./scripts/kerberos/extract-keytab.sh
      - chmod +x ./scripts/kerberos/init-kdc.sh       
      - chmod +x ./scripts/kerberos/setup-client.sh
      - chmod +x ./scripts/kerberos/tests/test-auth.sh
      - ./scripts/elk/00_create-certs.sh
      - sleep 10
      - docker compose up -d --pull=missing
      - sleep 5
      - |
        echo "Grafana: http://localhost:3000"
        echo "Prometheus: http://localhost:9090"
        echo "Vault: http://localhost:8200"
        echo "Redis: http://localhost:6379"
        echo "Elastic: https://localhost:5601"
    silent: true

  vault-up:
    preconditions:
      - test -f .env
      - test -f docker-compose.yml
    cmds:
      - docker compose up vault -d --pull=missing
      - sleep 5
      - |
        echo "Vault: http://localhost:8200"
    silent: true

  down:
    cmds:
      - task: stop

  restart:
    cmds:
      - docker compose restart vault

  status:
    cmds:
      - vault status

  init:
    cmds:
      - ./scripts/00_vault_init.sh

  unseal:
    cmds:
      - ./scripts/20_vault_unseal.sh

  backup:
    cmds:
      - vault operator raft snapshot save backup-`date +"%Y%m%d-%H%M"`.snap

  rm:
    aliases: ["clean"]
    cmds:
      - docker compose rm -sfv
      - docker volume rm {{.STACK_NAME }}_grafana-data
      - docker volume rm {{.STACK_NAME }}_loki-data
      - docker volume rm {{.STACK_NAME }}_prometheus-data
      - docker volume rm {{.STACK_NAME }}_promtail-data
      - docker volume rm {{.STACK_NAME }}_vault-data
      - docker volume rm {{.STACK_NAME }}_vault-logs
      - docker volume rm {{.STACK_NAME }}_redis-data
      - docker volume rm {{.STACK_NAME }}_kibana-data
      - docker volume rm {{.STACK_NAME }}_elasticsearch-data
      - docker volume rm {{.STACK_NAME }}_vault-audit-logs
      - docker volume rm {{.STACK_NAME }}_fleet-tokens
      - docker volume rm {{.STACK_NAME }}_fleet-server-data
      - docker volume rm {{.STACK_NAME }}_elastic-agent-data
      - docker volume rm {{.STACK_NAME }}_kerberos_kdc
      - rm -rf certs
    ignore_error: true
    vars:
      STACK_NAME:
        sh: basename "`pwd`"

  benchmark:
    cmds:
      - vault-benchmark run -config=./benchmark/config.hcl

  metrics:
      cmds:
        - |
          curl -s --header "X-Vault-Token: $VAULT_TOKEN" "$VAULT_ADDR/v1/sys/metrics?format=prometheus"
          
  logs-vault:
    cmds:
      - docker compose logs -f vault

  logs:
    cmds:
      - docker compose logs -f

  stop:
    cmds:
      - docker compose stop

  agent-up:
    dir: ./tfc-agent
    preconditions:
      - test -f .env
      - test -f docker-compose.yml
    cmds:
      - docker compose up -d --pull=missing

  agent-down:
    dir: ./tfc-agent
    preconditions:
      - test -f .env
      - test -f docker-compose.yml
    cmds:
      - docker compose stop

  ui:
    cmds:
      - open http://localhost:8200
      - ./scripts/10_vault_vars.sh

  pull:
    cmds:
      - docker compose pull
    silent: true

  dev:
    preconditions:
      - test -f .env
    cmds:
      - docker run --rm -p 8200:8200 --cap-add=IPC_LOCK -e VAULT_LICENSE=$VAULT_LICENSE hashicorp/vault-enterprise:latest server -dev -dev-root-token-id=root -dev-listen-address="0.0.0.0:8200"
    silent: true

  redis:
    dir: labs/database/redis/
    cmds:
      - source ../../../.env && terraform init -upgrade
      - source ../../../.env && terraform apply -auto-approve

  elk:
    dir: labs/database/elk/
    cmds:
      - source ../../../.env && terraform init -upgrade
      - source ../../../.env && terraform apply -auto-approve

  mfa-duo:
    aliases: ["mfa","duo"]
    dir: labs/mfa/duo/
    cmds:
      - source ../../../.env && terraform init -upgrade
      - source ../../../.env && terraform apply -auto-approve     

  elk-fleet:
    aliases: ["fleet"]
    preconditions:
      - test -x ./scripts/elk/fleet/20_post-deploy-fleet.sh
    vars:
      delay: '{{.delay | default 30}}' # Default is 30 seconds
    cmds:
      - |
        echo "Waiting for containers to stabilise..."
        i={{.delay}}
        while [ $i -ge 0 ]; do
          printf "\rTime remaining: %02ds" "$i"
          sleep 1
          i=$((i-1))
        done
        echo -e "\nStarting Fleet configuration..."
      - ./scripts/elk/fleet/20_post-deploy-fleet.sh

  elk-audit-logs:
    aliases: ["logging", "audit", "audit-logs", "audit-logs-elk"]
    deps: ["elk-fleet"]  # This will run elk-fleet first
    preconditions:
      - test -x ./scripts/elk/fleet/30_vault-elk-integration.sh
    cmds:
      - sleep 10
      - ./scripts/elk/fleet/30_vault-elk-integration.sh

  test-kerberos:
    desc: Test Kerberos authentication
    cmds:
      - |
        echo "🔍 Testing Kerberos setup..."
        
        # Test 1: Check KDC is running
        if docker-compose exec kerberos-kdc ps aux | grep -q krb5kdc; then
          echo "✅ KDC process running"
        else
          echo "❌ KDC not running"
          exit 1
        fi
        
        # Test 2: Test authentication
        if echo "admin123" | docker-compose exec -T kerberos-client kinit admin/admin@EXAMPLE.COM 2>/dev/null; then
          echo "✅ Authentication working"
          docker-compose exec kerberos-client klist | head -3
          docker-compose exec kerberos-client kdestroy
        else
          echo "❌ Authentication failed"
          exit 1
        fi
        
        # Test 3: Check keytab extraction
        if docker-compose exec vault test -f /vault/kerberos/vault.keytab 2>/dev/null; then
          echo "✅ Keytab available to Vault"
        else
          echo "⚠️  Keytab not found in Vault"
        fi
        
        echo "🎉 Kerberos is ready for Vault integration!"     



    